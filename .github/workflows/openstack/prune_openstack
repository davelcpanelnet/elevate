#!/usr/bin/env perl

use POSIX ();

use constant OS_AUTH_TYPE            => 'v3applicationcredential';
use constant OS_AUTH_URL             => 'https://keystone.hou-01.cloud.prod.cpanel.net:5000/v3';
use constant OS_IDENTITY_API_VERSION => '3';
use constant OS_REGION_NAME          => 'RegionOne';
use constant OS_INTERFACE            => 'public';

use constant OS_APPLICATION_CREDENTIAL_ID     => $ENV{OS_APPLICATION_CREDENTIAL_ID};
use constant OS_APPLICATION_CREDENTIAL_SECRET => $ENV{OS_APPLICATION_CREDENTIAL_SECRET};

# The should ultimately end up as secrets for repo reusability esported into env like the APPLICATION info
use constant KEY_NAME => "deletethis";
use constant VM_NAME  => "elevate.github.cpanel.net";

my $openstack_path = "/usr/bin/openstack" if -x "/usr/bin/openstack";
die "No Openstack CLI binary installed."  if !length $openstack_path;

# two hours ago - 7200 seconds
my $time_offset = 7200;
my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = gmtime( time - $time_offset );
my $hammer_time = POSIX::strftime( "%Y-%m-%dT%H:%M:%SZ", $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst );

remove_stale_instances();

remove_stale_keys();

sub get_keys {
    my $keys = {};

    my @list = split( '\n', `openstack keypair list -f json  | jq -r .[].Name` );

    foreach my $key_name (@list) {
        my $created_cmd = qq{ $openstack_path keypair show -f json "$key_name" | jq -r '.id + "," + .created_at + "," + .name' };
        ( $keys->{$key_name}->{'id'}, $keys->{$key_name}->{'created_on'}, $keys->{$key_name}->{'name'} ) = split( ',', _run_cmd($created_cmd) );
    }

    return $keys;
}

sub get_instances {
    my $instances = {};

    my @list = split( '\n', eval { `openstack server list -f json --no-name-lookup | jq -r .[].ID` } );

    foreach my $VM (@list) {
        my $created_cmd = qq{ $openstack_path server show -f json "$VM" | jq -r '.id + "," + .created + "," + .name' };
        ( $instances->{$VM}->{'id'}, $instances->{$VM}->{'created_on'}, $instances->{$VM}->{'name'} ) = split( ',', _run_cmd($created_cmd) );
    }

    return $instances;
}

sub remove_stale_keys {
    my $keys = get_keys();

    my @list = grep { $_->{'name'} =~ /${\KEY_NAME}/ } map { $keys->{$_} } keys %{$keys};

    foreach my $key (@list) {
        if ( $key->{'created_on'} < $hammer_time ) {
            print "deleting: Key ID: $key->{'name'}, created_on: $key->{'created_on'}, hammer_time: $hammer_time\n";
            _run_cmd("$openstack_path keypair delete $key->{'id'}");
        }
    }
}

sub remove_stale_instances {
    my $instances = get_instances();

    my @list = grep { $_->{'name'} =~ /${\VM_NAME}/ } map { $instances->{$_} } keys %{$instances};

    foreach my $vm (@list) {
        if ( $vm->{'created_on'} < $hammer_time ) {
            print "deleting: VM ID: $vm->{'name'}, created_on: $vm->{'created_on'}, hammer_time: $hammer_time\n";
            _run_cmd("$openstack_path server delete $vm->{'id'}");
        }
    }
}

sub _run_cmd {
    my $cmd = shift;

    my $out = `$cmd`;

    !length $? ? die $? : return $out;

    return 1;
}
